name: 'Terraform Azure'

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: false
      working-directory:
        type: string
        required: false
      use-tfplan-output:
        type: boolean
        required: false
    secrets:
      TF_STATE_STORAGE_ACCOUNT_NAME:
        required: true
      TF_ARM_CLIENT_ID:
        required: true
      TF_ARM_TENANT_ID:
        required: false
      
      GH_OWNER:
        required: false
      GH_TOKEN:
        required: false

jobs:
  terraform-azure:
    name: 'Terraform Azure'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || null }}
    env:
      use-tfplan-output: ${{ inputs.use-tfplan-output || false }} # Default to false
      tfplan-file-name: ${{ inputs.environment }}.tfplan
      ARM_TENANT_ID: ${{ secrets.TF_ARM_TENANT_ID }}
      ARM_CLIENT_ID: ${{ secrets.TF_ARM_CLIENT_ID }}
      ARM_USE_OIDC: true
      ARM_USE_AZUREAD: true
      GITHUB_OWNER: ${{ secrets.GH_OWNER }}
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working-directory || './' }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize Terraform using the relevant backend
    - name: Terraform Init
      run: |
        terraform init -reconfigure \
        -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT_NAME }}"

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      if: (github.event_name == 'pull_request' && env.use-tfplan-output == 'true') || env.use-tfplan-output == 'false'
      run: terraform plan -input=false -out="${{ env.tfplan-file-name }}"

    - name: Upload Plan
      if: github.event_name == 'pull_request' && env.use-tfplan-output == 'true' && ${{ hashFiles(env.tfplan-file-name) != '' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.tfplan-file-name }}
        path: "${{ env.tfplan-file-name }}"
        if-no-files-found: ignore
        overwrite: true

    - name: Get latest workflow run for PR
      if: github.ref == 'refs/heads/main' && env.use-tfplan-output == 'true' && ${{ hashFiles('${{ env.tfplan-file-name }}') != '' }}
      uses: octokit/request-action@v2.x
      id: get_latest_run
      with:
        route: GET /repos/${{ github.repository }}/actions/workflows/${{ github.workflow }}/runs?head_sha=${{ github.event.pull_request.head.sha }}&status=success
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Download Plan
      if: github.ref == 'refs/heads/main' && env.use-tfplan-output == 'true' && ${{ hashFiles('${{ env.tfplan-file-name }}') != '' }}
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.tfplan-file-name }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        run-id: ${{ fromJson(steps.get_latest_run.outputs.data).workflow_runs[0].id }}

    # On "main" branch run Terraform Apply to ensure infrastructure aligns with main branch code
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && ${{ hashFiles('${{ env.tfplan-file-name }}') != '' }}
      run: terraform apply -input=false -auto-approve "${{ env.tfplan-file-name }}"
