name: "Terraform Plan"
description: "Terraform plan to support multiple cloud providers"

inputs:
  tfplan-name:
    required: false
    description: "The filename to use for the output Terraform plan file."
    default: "tfplan.tfplan"
  output-tfplan:
    required: false
    description: "If a Terraform plan file should be output as an artifact."
    default: "false"
  github-token:
    required: false
    description: "GitHub token to create pull request comment"
    default: "false"

outputs:
  plan-outcome:
    description: "Terraform plan command outcome"
    value: ${{ steps.plan.outcome }}
  trivy-outcome:
    description: "Trivy scan command outcome"
    value: ${{ steps.trivy.outcome }}    

runs:
  using: "composite"
  steps:
    # Run the Terraform plan
    - name: Terraform Plan
      id: plan
      shell: bash
      run: terraform plan -input=false -out="./${{ inputs.tfplan-name }}"     

    # Scan the Terraform plan with Trivy
    - name: Terraform Plan Trivy Scan
      id: trivy-tfplan
      uses: aquasecurity/trivy-action@0.31.0
      with:
        scan-type: "config"
        scan-ref: "./${{ inputs.tfplan-name }}"
        format: "table"
        exit-code: "1"
        trivyignores: ".trivyignore"

    # Create / update pull request with a comment showing the Terraform outputs
    - name: Pull Request Comment
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request' && inputs.github-token != 'false'
      env:
        PLAN: "${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          // Get all comments for PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })

          // Get the bot comment
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan')
          })

          // Prepare the comment format
          if (${{ steps.fmt.outcome || unsuccessful }} == 'success') { const fmt = `#### Terraform Format and Style 🖌 \`${{ steps.fmt.outcome }}\`` }
          if (${{ steps.init.outcome || unsuccessful }} == 'success') { const init = `#### Terraform Initialization ⚙️ \`${{ steps.init.outcome }}\`` }
          if (${{ steps.validate.outcome || unsuccessful }} == 'success') { const validate = `#### Terraform Validation 🤖 \`${{ steps.validate.outcome }}\` }
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>` }

          if (${{ steps.plan.outcome || unsuccessful }} == 'success') { const plan = `#### Terraform Plan 📖 \`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`terraform\n
          ${process.env.PLAN}
          \`\`\`

          </details>` }

          // const output = `#### Terraform Format and Style 🖌 \`${{ steps.fmt.outcome }}\`
          // #### Terraform Initialization ⚙️ \`${{ steps.init.outcome }}\`
          // #### Terraform Validation 🤖 \`${{ steps.validate.outcome }}\`
          // <details><summary>Validation Output</summary>

          // \`\`\`\n
          // ${{ steps.validate.outputs.stdout }}
          // \`\`\`

          // </details>

          // #### Terraform Plan 📖 \`${{ steps.plan.outcome }}\`

          // <details><summary>Show Plan</summary>

          // \`\`\`terraform\n
          // ${process.env.PLAN}
          // \`\`\`

          // </details>`;

          // Check if creating or updating existing comment
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              // body: output
              body: fmt + init + validate + plan
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              // body: output
              body: fmt + init + validate + plan
            })
          }             

    # Upload the Terraform plan as an artifact
    - name: Upload Plan
      if: inputs.output-tfplan == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.tfplan-name }}
        path: "**/${{ inputs.tfplan-name }}"
        if-no-files-found: error
        overwrite: true
